// Generated by CoffeeScript 1.6.3
/*
  compute the shapley value of a game
  input file format:
  - first line : number of player
  - then each other line: v  1,2,3=0

  ex:
  2
  1=0
  2=0
  1,2=1

  use star for any player
  2
  *=0
  *,*=1
*/


(function() {
  var CoalitionGame, ScoreRule, coalition, fs, linereader;

  fs = require('fs');

  linereader = require('line-reader');

  if (process.argv.length !== 3) {
    console.log("Usage: shapley_value input_data");
    process.exit(1);
  }

  ScoreRule = (function() {
    function ScoreRule(players, value) {
      this.players = players;
      this.value = value;
    }

    ScoreRule.prototype.toString = function() {
      return this.players + '=' + this.value;
    };

    return ScoreRule;

  })();

  CoalitionGame = (function() {
    function CoalitionGame(nb) {
      this.nb = nb;
      this.scores = [];
    }

    CoalitionGame.prototype.addScore = function(x) {
      var m;
      m = x.match(/([\d\*,]+)=(\d)+/);
      if (m) {
        return this.scores.push(new ScoreRule(m[1].split(','), parseInt(m[0])));
      }
    };

    CoalitionGame.prototype.fact = function(x) {
      if (x === 1) {
        return 1;
      }
      return x * this.fact(x - 1);
    };

    CoalitionGame.prototype.permutations = function(arr, ptr) {
      var i, permutation, _i, _ref, _results;
      if (ptr == null) {
        ptr = 0;
      }
      if (ptr === arr.length) {
        return;
      }
      _results = [];
      for (i = _i = ptr, _ref = arr.length; ptr <= _ref ? _i <= _ref : _i >= _ref; i = ptr <= _ref ? ++_i : --_i) {
        permutation = arr.concat();
        permutation[ptr] = arr[i];
        permutation[i] = arr[ptr];
        _results.push(console.log("At step " + i + " got permut ", permutation));
      }
      return _results;
    };

    CoalitionGame.prototype.calculateShapleyValue = function(player) {
      var fn, vals, _i, _ref, _results;
      fn = this.fact(this.nb);
      console.log(" fact is " + fn + " for " + this.nb);
      vals = (function() {
        _results = [];
        for (var _i = 1, _ref = this.nb; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      return console.log("Tab is ", vals);
    };

    return CoalitionGame;

  })();

  coalition = null;

  linereader.eachLine(process.argv[2], function(line, last) {
    var x, _i, _ref, _results;
    if (!coalition) {
      coalition = new CoalitionGame(parseInt(line));
    } else {
      coalition.addScore(line);
    }
    if (last) {
      _results = [];
      for (x = _i = 1, _ref = coalition.nb; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
        _results.push(console.log('Got ' + coalition.calculateShapleyValue(x)));
      }
      return _results;
    }
  });

}).call(this);
